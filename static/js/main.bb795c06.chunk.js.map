{"version":3,"sources":["component/weather.js","component/search.js","App.js","serviceWorker.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","city","temp","minTemp","maxTemp","desc","weatherIcon","class","errorr","role","Search","loadweather","error","onSubmit","type","name","placeholder","App","getWeather","event","a","preventDefault","target","elements","value","country","fetch","apiCall","json","response","console","log","setState","sys","calCelsius","main","icon","Thunderstorm","temp_min","temp_max","weather","description","getWi","id","state","undefined","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.bb795c06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = ({ city, temp, minTemp, maxTemp, desc, weatherIcon }) => {\r\n    return (\r\n        <div className='container tc'>\r\n            <div className='cards'>\r\n                <h1 className='py-3'>{city}</h1>\r\n                <h5 className='py-4'>\r\n                    <i class={`wi ${weatherIcon} display-1`}></i>\r\n                </h5>\r\n\r\n                {/* ----------------temp--------------------------- */}\r\n                {temp ?\r\n                    <h1 className='py-3'>{temp}&deg;c</h1> :\r\n                    null\r\n                }\r\n                {minmaxTemp(`${minTemp}`, `${maxTemp}`)}\r\n                <h4 className='py-4'>{desc}</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst minmaxTemp = (min, max) => {\r\n    if (min && max) {\r\n        return (\r\n            <h3>\r\n                <span className='px-4'><span className=\"f5\">min</span> {min}&deg;c</span>\r\n                <span className='px-4'><span className=\"f5\">max</span> {max}&deg;c</span>\r\n            </h3>\r\n        )\r\n    }\r\n    else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react'\r\nimport './search.css';\r\nconst Search = ({ loadweather, error }) => {\r\n    return (\r\n        <div className=\"container \">\r\n            <div>{error ? errorr() : null}</div>\r\n            <form onSubmit={loadweather}>\r\n                <div className=\"row tc\">\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"a\" name=\"city\" placeholder=\"city\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <input type=\"text\" className=\"a\" name=\"country\" placeholder=\"country\" />\r\n                    </div>\r\n                    <div className=\"col-md-3\">\r\n                        <button className=\"btn btn-warning\">Get Weather</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst errorr = () => {\r\n    return (\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n            Please Enter City and Country\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Search;","import React from 'react';\nimport Weather from './component/weather';\nimport 'weather-icons/css/weather-icons.css';\nimport Search from './component/search';\n// import './App.css';\n\nconst apiKey = '444d119ef9c952fbadbe12e81a1be294';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      temp: undefined,\n      icon: undefined,\n      minTemp: '',\n      maxTemp: '',\n      desc: '',\n      error: false\n\n    };\n    // this.getWeather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    }\n  }\n\n  calCelsius(temp) {\n    let cel = Math.floor(temp - 273.15)\n    return cel;\n  }\n\n  getWi(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weatherIcon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weatherIcon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weatherIcon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weatherIcon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weatherIcon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weatherIcon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weatherIcon.Clouds });\n        break;\n      default:\n        this.setState({ icon: this.weatherIcon.Clouds });\n    }\n  }\n\n  getWeather = async (event) => {\n\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n\n    if (city && country) {\n      const apiCall = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}`);\n      const response = await apiCall.json();\n      console.log(response);\n\n      this.setState({\n        city: `${response.name},${response.sys.country}`,\n\n        temp: this.calCelsius(response.main.temp),\n        icon: this.weatherIcon.Thunderstorm,\n        minTemp: this.calCelsius(response.main.temp_min),\n        maxTemp: this.calCelsius(response.main.temp_max),\n        desc: response.weather[0].description\n      });\n      this.getWi(this.weatherIcon, response.weather[0].id)\n    }\n    else {\n      this.setState({ error: true });\n    }\n\n  };\n\n  render() {\n    return (\n      <div className='weather center'>\n        <Search\n          loadweather={this.getWeather} error={this.state.error}\n        />\n        <Weather\n          city={this.state.city}\n          country={this.state.country}\n          temp={this.state.temp}\n          weatherIcon={this.state.icon}\n          minTemp={this.state.minTemp}\n          maxTemp={this.state.maxTemp}\n          desc={this.state.desc}\n        />\n      </div>\n    )\n  }\n}\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}